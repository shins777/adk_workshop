# Copyright 2025 Forusone(forusone777@gmail.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
from typing import AsyncGenerator
from typing_extensions import override

from google.adk.agents import LlmAgent, BaseAgent, SequentialAgent
from google.adk.agents.invocation_context import InvocationContext

from google.adk.events import Event
from google.adk.agents import SequentialAgent

class CriticAgent(BaseAgent):
    """
    A custom agent that orchestrates a multi-step critique workflow using sub-agents.

    The CriticAgent coordinates three LlmAgent sub-agents: positive_critic_agent, negative_critic_agent,
    and review_critic_agent. It first runs the positive critic, then the negative critic, and finally
    the review critic, yielding events from each step. The agent can abort the workflow early if
    required output conditions are not met (e.g., missing keywords in the state). This enables
    complex, conditional, multi-stage evaluation and review of user input or generated content.

    Attributes:
        positive_critic_agent (LlmAgent): Agent for generating positive critiques.
        negative_critic_agent (LlmAgent): Agent for generating negative critiques.
        review_critic_agent (LlmAgent): Agent for reviewing the combined critiques.
        sequential_agent (SequentialAgent): Internal sequential agent for managing the workflow.

    Methods:
        _run_async_impl(ctx): Asynchronously runs the critique workflow, yielding events at each stage.
    """

    positive_critic_agent: LlmAgent
    negative_critic_agent: LlmAgent
    review_critic_agent: LlmAgent

    sequential_agent: SequentialAgent

    # model_config allows setting Pydantic configurations if needed, e.g., arbitrary_types_allowed
    model_config = {"arbitrary_types_allowed": True}

    def __init__(
        self,
        name: str,
        positive_critic_agent: LlmAgent,
        negative_critic_agent: LlmAgent,
        review_critic_agent: LlmAgent,
    ):
        sequential_agent = SequentialAgent(
            name="PostProcessing", sub_agents=[positive_critic_agent, negative_critic_agent]
        )

        sub_agents_list = [
            sequential_agent,
            review_critic_agent,
        ]

        super().__init__(
            name=name,
            positive_critic_agent=positive_critic_agent,
            negative_critic_agent=negative_critic_agent,
            review_critic_agent=review_critic_agent,
            sequential_agent=sequential_agent,
            sub_agents=sub_agents_list,
        )

    @override
    async def _run_async_impl(self, ctx: InvocationContext) -> AsyncGenerator[Event, None]:

        """
        Asynchronously executes the multi-step critique workflow.

        This method runs the positive critic agent, negative critic agent, and review critic agent
        in sequence, yielding events from each step. If required output conditions are not met
        (e.g., missing keywords in the state after a step), the workflow is aborted early.
        This enables conditional, stepwise evaluation and review of user input or generated content.

        Args:
            ctx (InvocationContext): The invocation context containing session and state information.

        Yields:
            Event: Events generated by each sub-agent during the workflow execution.
        """

        #-----------[positive_critic_agent]--------------
        print(f"[{self.name}] Running positive_critic_agent...")
        async for event in self.positive_critic_agent.run_async(ctx):

            print(f"[{self.name}] Event from positive_critic_agent: {event.model_dump_json(indent=2, exclude_none=True)}")
            yield event # yield an event and move on to the next step

        if "images" not in ctx.session.state["positive_critic_output"].lower():
            print(f"[{self.name}] Failed to generate answer since no mention about images . Aborting workflow.")
            return # Stop processing if positive critic is failed

        #-----------[negative_critic_agent]--------------
        print(f"[{self.name}] Running negative_critic_agent...")
        async for event in self.negative_critic_agent.run_async(ctx):
            print(f"[{self.name}] Event from negative_critic_agent: {event.model_dump_json(indent=2, exclude_none=True)}")
            yield event # yield an event and move on to the next step

        if "social" not in ctx.session.state["negative_critic_output"].lower():
            print(f"[{self.name}] Failed to generate answer since no mention about social issues . Aborting workflow.")
            return # Stop processing if negative critic is failed

        #-----------[review_critic_agent]--------------
        print(f"[{self.name}] Running review_critic_agent")
        async for event in self.review_critic_agent.run_async(ctx):
            print(f"[{self.name}] Event from review_critic_agent: {event.model_dump_json(indent=2, exclude_none=True)}")
            yield event
